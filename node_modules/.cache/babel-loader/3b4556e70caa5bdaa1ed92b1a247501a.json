{"remainingRequest":"/home/lucas/Desktop/test/node_modules/babel-loader/lib/index.js!/home/lucas/Desktop/test/src/views/forms/form-validation/code.js","dependencies":[{"path":"/home/lucas/Desktop/test/src/views/forms/form-validation/code.js","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/babel.config.js","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/babel-loader/lib/index.js","mtime":1646760975446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/lucas/Desktop/test/src/views/forms/form-validation/code.js"],"names":["codeSimple","codeMultiple","codeType","codePlaceholder","codePlaceholderArgument","codeLocale","codeExtended"],"mappings":"AAAA,OAAO,IAAMA,UAAU,owEAAhB;AA8FP,OAAO,IAAMC,YAAY,sjHAAlB;AAuIP,OAAO,IAAMC,QAAQ,ywTAAd;AA0TP,OAAO,IAAMC,eAAe,kiFAArB;AAwGP,OAAO,IAAMC,uBAAuB,ywFAA7B;AAkHP,OAAO,IAAMC,UAAU,iiEAAhB;AAoFP,OAAO,IAAMC,YAAY,wkHAAlB","sourcesContent":["export const codeSimple = `\n<template>\n  <!-- form -->\n  <validation-observer ref=\"simpleRules\">\n    <b-form>\n      <b-row>\n        <b-col md=\"6\">\n          <b-form-group>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"First Name\"\n              rules=\"required\"\n            >\n              <b-form-input\n                v-model=\"name\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"First Name\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n        <b-col md=\"6\">\n          <b-form-group>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Email\"\n              rules=\"required|email\"\n            >\n              <b-form-input\n                v-model=\"emailValue\"\n                :state=\"errors.length > 0 ? false:null\"\n                type=\"email\"\n                placeholder=\"Email\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n        <b-col cols=\"12\">\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n            @click.prevent=\"validationForm\"\n          >\n            Submit\n          </b-button>\n        </b-col>\n      </b-row>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BFormInput, BFormGroup, BForm, BRow, BCol, BButton, BCardText,\n} from 'bootstrap-vue'\nimport { required, email } from '@validations'\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n    BCardText,\n    BFormInput,\n    BFormGroup,\n    BForm,\n    BRow,\n    BCol,\n    BButton,\n  },\n  data() {\n    return {\n      emailValue: '',\n      name: '',\n      required,\n      email,\n    }\n  },\n  methods: {\n    validationForm() {\n      this.$refs.simpleRules.validate().then(success => {\n        if (success) {\n          // eslint-disable-next-line\n          alert('form submitted!')\n        }\n      })\n    },\n  },\n}\n</script>\n`\n\nexport const codeMultiple = `\n<template>\n  <validation-observer ref=\"simpleRules\">\n    <b-form>\n      <b-row>\n        <b-col md=\"6\">\n          <b-form-group>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Name\"\n              rules=\"required\"\n            >\n              <b-form-input\n                v-model=\"name\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Your Name\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n        <b-col md=\"6\">\n          <b-form-group>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Email\"\n              rules=\"required|email\"\n            >\n              <b-form-input\n                v-model=\"emailValue\"\n                :state=\"errors.length > 0 ? false:null\"\n                type=\"email\"\n                placeholder=\"Your Email\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n        <b-col md=\"6\">\n          <b-form-group>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Password\"\n              vid=\"Password\"\n              rules=\"required|password\"\n            >\n              <b-form-input\n                v-model=\"PasswordValue\"\n                type=\"password\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Your Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n        <b-col md=\"6\">\n          <b-form-group>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Password Confirm\"\n              rules=\"required|confirmed:Password\"\n            >\n              <b-form-input\n                v-model=\"passwordCon\"\n                :state=\"errors.length > 0 ? false:null\"\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- submit button -->\n        <b-col>\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n            @click.prevent=\"validationForm\"\n          >\n            Submit\n          </b-button>\n        </b-col>\n      </b-row>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BFormInput, BFormGroup, BForm, BRow, BCol, BButton,\n} from 'bootstrap-vue'\nimport {\n  required, email, confirmed, password,\n} from '@validations'\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n    BFormInput,\n    BFormGroup,\n    BForm,\n    BRow,\n    BCol,\n    BButton,\n  },\n  data() {\n    return {\n      emailValue: '',\n      name: '',\n      PasswordValue: '',\n      passwordCon: '',\n      required,\n      password,\n      email,\n      confirmed,\n    }\n  },\n  methods: {\n    validationForm() {\n      this.$refs.simpleRules.validate().then(success => {\n        if (success) {\n          // eslint-disable-next-line\n          alert('form submitted!')\n        }\n      })\n    },\n  },\n}\n</script>\n`\n\nexport const codeType = `\n<template>\n  <validation-observer ref=\"simpleRules\">\n    <b-form>\n      <b-row>\n\n        <!--  This field is required-->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>This field is required</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required\"\n              name=\"First Name\"\n            >\n              <b-form-input\n                v-model=\"name\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Fist Name\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!--Enter Number between 10 & 20 -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Enter Number between 10 & 20</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|between:10,20\"\n              name=\"Number between\"\n            >\n              <b-form-input\n                v-model=\"numberRange\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Number between 10 & 20\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- Must only consist of numbers-->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Must only consist of numbers</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|integer\"\n              name=\"Number\"\n            >\n              <b-form-input\n                v-model=\"number\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Number Only\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- Must match the specified regular expression : ^([0-9]+)$ - numbers only -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Must match the specified regular expression : ^([0-9]+)$ - numbers only</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|regex:^([0-9]+)$\"\n              name=\"Regex\"\n            >\n              <b-form-input\n                v-model=\"numberRegx\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Specified regular expression\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!--  Only alphabetic characters-->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Only alphabetic characters</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|alpha\"\n              name=\"Alpha\"\n            >\n              <b-form-input\n                v-model=\"Alphabetic\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Character Only\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- Length should not be less than the specified length : 3 -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Length should not be less than the specified length : 3</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|min:3\"\n              name=\"Min Character\"\n            >\n              <b-form-input\n                v-model=\"digitValue\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter minimum 3 Characters\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!--Password Input Field -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Password Input Field</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|password\"\n              name=\"password\"\n              vid=\"password\"\n            >\n              <b-form-input\n                v-model=\"passwordValue\"\n                type=\"password\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- The digits field must be numeric and exactly contain 3 digits -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>The digits field must be numeric and exactly contain 3 digits</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|digits:3\"\n              name=\"Numeric\"\n            >\n              <b-form-input\n                v-model=\"digitValue2\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Exactyly 3 digit\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!--Repeat password must match  -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Repeat password must match</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|confirmed:password\"\n              name=\"Confirm Password\"\n            >\n              <b-form-input\n                v-model=\"passwordCon\"\n                type=\"password\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Repeat Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!--Only alphabetic characters, numbers, dashes or underscores -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Only alphabetic characters, numbers, dashes or underscores</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              rules=\"required|alpha-dash\"\n              name=\"All Character\"\n            >\n              <b-form-input\n                v-model=\"character\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Character, Numbers, Dash, Underscores\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- Must be a valid email -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Must be a valid email</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Email\"\n              rules=\"required|email\"\n            >\n              <b-form-input\n                v-model=\"emailValue\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Email\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!--Must be a valid url  -->\n        <b-col md=\"6\">\n          <b-form-group>\n            <label>Must be a valid url</label>\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"URL\"\n              rules=\"required|url\"\n            >\n              <b-form-input\n                v-model=\"URL\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Enter Valid URL\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- submit button -->\n        <b-col cols=\"12\">\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n            @click.prevent=\"validationForm\"\n          >\n            Submit\n          </b-button>\n        </b-col>\n      </b-row>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BFormInput, BFormGroup, BForm, BRow, BCol, BButton,\n} from 'bootstrap-vue'\nimport {\n  required, email, confirmed, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n    BFormInput,\n    BFormGroup,\n    BForm,\n    BRow,\n    BCol,\n    BButton,\n  },\n  data() {\n    return {\n      name: '',\n      passwordValue: '',\n      passwordCon: '',\n      emailValue: '',\n      number: '',\n      numberRange: '',\n      numberRegx: '',\n      URL: '',\n      Alphabetic: '',\n      digitValue: '',\n      digitValue2: '',\n      character: '',\n      required,\n      confirmed,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  methods: {\n    validationForm() {\n      this.$refs.simpleRules.validate().then(success => {\n        if (success) {\n          // eslint-disable-next-line\n          alert('form submitted!')\n        }\n      })\n    },\n  },\n}\n</script>\n`\n\nexport const codePlaceholder = `\n<template>\n  <validation-observer ref=\"simpleRules\">\n    <b-form>\n      <b-row>\n\n        <!-- username -->\n        <b-col cols=\"12\">\n          <b-form-group\n            label=\"Username\"\n            label-for=\"username\"\n          >\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Username\"\n              rules=\"required\"\n            >\n              <b-form-input\n                id=\"username\"\n                v-model=\"username\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Username\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- password -->\n        <b-col cols=\"12\">\n          <b-form-group\n            label=\"Password\"\n            label-for=\"password\"\n          >\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Password\"\n              rules=\"required\"\n            >\n              <b-form-input\n                id=\"password\"\n                v-model=\"passValue\"\n                type=\"password\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- login button -->\n        <b-col cols=\"12\">\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n            @click.prevent=\"validationForm\"\n          >\n            Login\n          </b-button>\n        </b-col>\n      </b-row>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {BFormInput, BFormGroup, BForm, BRow, BCol, BButton, BCardText,} from 'bootstrap-vue'\nimport { required } from '@validations'\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n    BFormInput,\n    BFormGroup,\n    BCardText,\n    BForm,\n    BRow,\n    BCol,\n    BButton,\n  },\n  data() {\n    return {\n      passValue: '',\n      username: '',\n      required,\n    }\n  },\n  methods: {\n    validationForm() {\n      this.$refs.simpleRules.validate().then(success => {\n        if (success) {\n          // eslint-disable-next-line\n          alert('login successfully')\n        }\n      })\n    },\n  },\n}\n</script>\n`\n\nexport const codePlaceholderArgument = `\n<template>\n  <validation-observer ref=\"simpleRules\">\n    <b-form>\n      <b-row>\n\n        <!-- password -->\n        <b-col cols=\"12\">\n          <b-form-group\n            label=\"Password\"\n            label-for=\"a-password\"\n          >\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Password\"\n              vid=\"Password\"\n              rules=\"required|min:8|password\"\n            >\n              <b-form-input\n                id=\"a-password\"\n                v-model=\"username\"\n                :state=\"errors.length > 0 ? false:null\"\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- confirm password -->\n        <b-col cols=\"12\">\n          <b-form-group\n            label=\"Confirm Password\"\n            label-for=\"ac-password\"\n          >\n            <validation-provider\n              #default=\"{ errors }\"\n              name=\"Confirm Password\"\n              rules=\"required|confirmed:Password\"\n            >\n\n              <b-form-input\n                id=\"ac-password\"\n                v-model=\"passValue\"\n                :state=\"errors.length > 0 ? false:null\"\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n              />\n              <small class=\"text-danger\">{{ errors[0] }}</small>\n            </validation-provider>\n          </b-form-group>\n        </b-col>\n\n        <!-- reset button -->\n        <b-col cols=\"12\">\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n            @click.prevent=\"validationForm\"\n          >\n            Reset\n          </b-button>\n        </b-col>\n      </b-row>\n    </b-form>\n  </validation-observer>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BFormInput, BFormGroup, BForm, BRow, BCol, BButton, BCardText,\n} from 'bootstrap-vue'\nimport {\n  required, min, confirmed,\n} from '@validations'\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n    BCardText,\n    BFormInput,\n    BFormGroup,\n    BForm,\n    BRow,\n    BCol,\n    BButton,\n  },\n  data() {\n    return {\n      passValue: '',\n      username: '',\n      required,\n      min,\n      confirmed,\n      codePlaceholderArgument,\n    }\n  },\n  methods: {\n    validationForm() {\n      this.$refs.simpleRules.validate().then(success => {\n        if (success) {\n          // eslint-disable-next-line\n          alert('password reset!')\n        }\n      })\n    },\n  },\n}\n</script>\n`\n\nexport const codeLocale = `\n<template>\n  <validation-observer ref=\"form\">\n    <b-row>\n      <b-col md=\"6\">\n        <b-form-group>\n          <validation-provider\n            #default=\"{ errors }\"\n            name=\"email\"\n            rules=\"required|email\"\n          >\n            <b-form-input\n              v-model=\"email\"\n              type=\"email\"\n              :state=\"errors.length > 0 ? false:null\"\n              placeholder=\"Email\"\n            />\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n      <b-col md=\"6\">\n        <b-form-group>\n          <validation-provider\n            #default=\"{ errors }\"\n            name=\"password\"\n            rules=\"required|min:6\"\n          >\n            <b-form-input\n              v-model=\"passwordValue\"\n              type=\"password\"\n              :state=\"errors.length > 0 ? false:null\"\n              placeholder=\"Password\"\n            />\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n  </validation-observer>\n</template>\n\n<script>\nimport {\n  BFormInput, BFormGroup, BButton, BRow, BCol, BCardText,\n} from 'bootstrap-vue'\nimport { ValidationProvider, ValidationObserver, localize } from 'vee-validate'\nimport { password, required } from '@validations'\n\nexport default {\n  components: {\n    BFormInput,\n    BFormGroup,\n    BButton,\n    BCardText,\n    BRow,\n    BCol,\n    ValidationProvider,\n    ValidationObserver,\n  },\n  data() {\n    return {\n      // ? Default locale for VeeValidate is 'en'\n      locale: 'en',\n      email: '',\n      passwordValue: '',\n      password,\n      required,\n    }\n  },\n  methods: {\n    switchLoc() {\n      // switch the locale.\n      this.locale = this.locale === 'en' ? 'ar' : 'en'\n      localize(this.locale)\n\n      // re-validate to re-generate the messages.\n      this.$refs.form.validate()\n    },\n  },\n}\n</script>\n`\n\nexport const codeExtended = `\n<template>\n  <div>\n    <b-row>\n\n      <!-- code -->\n      <b-col md=\"6\">\n        <prism\n          language=\"javascript\"\n          class=\"rounded \"\n        >\n          {{ codeCredit }}\n        </prism>\n      </b-col>\n\n      <!-- ciode -->\n      <b-col md=\"6\">\n        <prism\n          language=\"javascript\"\n          class=\"rounded mb-2\"\n        >\n          {{ codePositive }}\n        </prism>\n      </b-col>\n    </b-row>\n\n    <!-- form -->\n    <validation-observer ref=\"simpleRules\">\n      <b-form>\n        <b-row>\n          <b-col md=\"6\">\n            <b-form-group label=\"Credit Card\">\n              <validation-provider\n                #default=\"{ errors }\"\n                name=\"Credit Card\"\n                rules=\"required|credit-card\"\n              >\n                <b-form-input\n                  v-model=\"cardNUm\"\n                  :state=\"errors.length > 0 ? false:null\"\n                  placeholder=\"Credit Card Number\"\n                />\n                <small class=\"text-danger\">{{ errors[0] }}</small>\n              </validation-provider>\n            </b-form-group>\n          </b-col>\n          <b-col md=\"6\">\n            <b-form-group label=\"Enter Only Positive Number\">\n              <validation-provider\n                #default=\"{ errors }\"\n                name=\"Number\"\n                rules=\"required|positive\"\n              >\n                <b-form-input\n                  v-model=\"posNum\"\n                  :state=\"errors.length > 0 ? false:null\"\n                  placeholder=\"Positive Number\"\n                />\n                <small class=\"text-danger\">{{ errors[0] }}</small>\n              </validation-provider>\n            </b-form-group>\n          </b-col>\n        </b-row>\n\n        <!-- submit button -->\n        <b-form-group>\n          <b-button\n            type=\"submit\"\n            variant=\"primary\"\n            @click.prevent=\"validationForm\"\n          >\n            Submit\n          </b-button>\n        </b-form-group>\n      </b-form>\n    </validation-observer>\n  </div>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BFormInput, BFormGroup, BForm, BButton, BRow, BCol, BCardText,\n} from 'bootstrap-vue'\nimport 'prismjs'\nimport 'prismjs/themes/prism-tomorrow.css'\nimport Prism from 'vue-prism-component'\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n    BFormInput,\n    BFormGroup,\n    BCardText,\n    BForm,\n    BRow,\n    BCol,\n    BButton,\n    Prism,\n  },\n  data() {\n    return {\n      cardNUm: '',\n      posNum: '',\n      codeCredit: \\`export const credit = extend('credit', {\n    validate: validatorCreditCard,\n    message: 'Please enter positive number!',\n  })\n\n  export const validatorCreditCard = creditnum => {\n  /* eslint-disable no-useless-escape */\n  const cRegExp = /^(?:3[47][0-9]{13})$/\n  /* eslint-enable no-useless-escape */\n  const validCreditCard = cRegExp.test(creditnum)\n  return validCreditCard\n  }\\`,\n      codePositive: \\`export const positive = extend('positive', {\n  validate: validatorPositive,\n  message: 'Please enter positive number!',\n  })\n\n  export const validatorPositive = value => {\n  if (value >= 0) {\n    return true\n  }\n  return false\n  }\n  \\`,\n    }\n  },\n  methods: {\n    validationForm() {\n      this.$refs.simpleRules.validate().then(success => {\n        if (success) {\n        // eslint-disable-next-line\n          alert('form submitted!')\n        }\n      })\n    },\n  },\n}\n</script>\n`\n"]}]}