{"remainingRequest":"/home/lucas/Desktop/test/node_modules/babel-loader/lib/index.js!/home/lucas/Desktop/test/src/views/forms/form-element/form-tag/code.js","dependencies":[{"path":"/home/lucas/Desktop/test/src/views/forms/form-element/form-tag/code.js","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/babel.config.js","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/babel-loader/lib/index.js","mtime":1646760975446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IHZhciBjb2RlQWR2YW5jZUN1c3RvbSA9ICJcbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8Yi1mb3JtLWdyb3VwIGxhYmVsPVwiVGFnZ2VkIGlucHV0IHVzaW5nIGRyb3Bkb3duXCI+XG4gICAgICA8Yi1mb3JtLXRhZ3NcbiAgICAgICAgdi1tb2RlbD1cInZhbHVlXCJcbiAgICAgICAgbm8tb3V0ZXItZm9jdXNcbiAgICAgID5cbiAgICAgICAgPHRlbXBsYXRlIHYtc2xvdD1cInsgdGFncywgZGlzYWJsZWQsIGFkZFRhZywgcmVtb3ZlVGFnIH1cIj5cbiAgICAgICAgICA8dWxcbiAgICAgICAgICAgIHYtaWY9XCJ0YWdzLmxlbmd0aCA+IDBcIlxuICAgICAgICAgICAgY2xhc3M9XCJsaXN0LWlubGluZSBkLWlubGluZS1ibG9jayBtYi0xXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgdi1mb3I9XCJ0YWcgaW4gdGFnc1wiXG4gICAgICAgICAgICAgIDprZXk9XCJ0YWdcIlxuICAgICAgICAgICAgICBjbGFzcz1cImxpc3QtaW5saW5lLWl0ZW1cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Yi1mb3JtLXRhZ1xuICAgICAgICAgICAgICAgIDp0aXRsZT1cInRhZ1wiXG4gICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICBAcmVtb3ZlPVwicmVtb3ZlVGFnKHRhZylcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3sgdGFnIH19XG4gICAgICAgICAgICAgIDwvYi1mb3JtLXRhZz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cblxuICAgICAgICAgIDxiLWRyb3Bkb3duXG4gICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmUtc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIGJsb2NrXG4gICAgICAgICAgICBtZW51LWNsYXNzPVwidy0xMDBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YnV0dG9uLWNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxiLWljb24gaWNvbj1cInRhZy1maWxsXCIgLz4gQ2hvb3NlIHRhZ3NcbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8Yi1kcm9wZG93bi1mb3JtIEBzdWJtaXQuc3RvcC5wcmV2ZW50PVwiKCkgPT4ge31cIj5cbiAgICAgICAgICAgICAgPGItZm9ybS1ncm91cFxuICAgICAgICAgICAgICAgIGxhYmVsLWZvcj1cInRhZy1zZWFyY2gtaW5wdXRcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwiU2VhcmNoIHRhZ3NcIlxuICAgICAgICAgICAgICAgIGxhYmVsLWNvbHMtbWQ9XCJhdXRvXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1iLTBcIlxuICAgICAgICAgICAgICAgIGxhYmVsLXNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgOmRlc2NyaXB0aW9uPVwic2VhcmNoRGVzY1wiXG4gICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dFxuICAgICAgICAgICAgICAgICAgaWQ9XCJ0YWctc2VhcmNoLWlucHV0XCJcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cInNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2ItZm9ybS1ncm91cD5cbiAgICAgICAgICAgIDwvYi1kcm9wZG93bi1mb3JtPlxuICAgICAgICAgICAgPGItZHJvcGRvd24tZGl2aWRlciAvPlxuICAgICAgICAgICAgPGItZHJvcGRvd24taXRlbVxuICAgICAgICAgICAgICB2LWZvcj1cIm9wdGlvbiBpbiBhdmFpbGFibGVPcHRpb25zXCJcbiAgICAgICAgICAgICAgOmtleT1cIm9wdGlvblwiXG4gICAgICAgICAgICAgIEBjbGljaz1cIm9uT3B0aW9uQ2xpY2soeyBvcHRpb24sIGFkZFRhZyB9KVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt7IG9wdGlvbiB9fVxuICAgICAgICAgICAgPC9iLWRyb3Bkb3duLWl0ZW0+XG4gICAgICAgICAgICA8Yi1kcm9wZG93bi10ZXh0IHYtaWY9XCJhdmFpbGFibGVPcHRpb25zLmxlbmd0aCA9PT0gMFwiPlxuICAgICAgICAgICAgICBUaGVyZSBhcmUgbm8gdGFncyBhdmFpbGFibGUgdG8gc2VsZWN0XG4gICAgICAgICAgICA8L2ItZHJvcGRvd24tdGV4dD5cbiAgICAgICAgICA8L2ItZHJvcGRvd24+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2ItZm9ybS10YWdzPlxuICAgIDwvYi1mb3JtLWdyb3VwPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQge0JGb3JtVGFncyxCRm9ybUdyb3VwLEJEcm9wZG93bixCRHJvcGRvd25Gb3JtLEJGb3JtSW5wdXQsQkRyb3Bkb3duRGl2aWRlcixCRHJvcGRvd25JdGVtLEJGb3JtVGFnLEJEcm9wZG93blRleHR9IGZyb20gJ2Jvb3RzdHJhcC12dWUnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIEJGb3JtVGFncyxcbiAgICBCRm9ybUdyb3VwLFxuICAgIEJEcm9wZG93bixcbiAgICBCRHJvcGRvd25Gb3JtLFxuICAgIEJGb3JtSW5wdXQsXG4gICAgQkRyb3Bkb3duRGl2aWRlcixcbiAgICBCRHJvcGRvd25JdGVtLFxuICAgIEJGb3JtVGFnLFxuICAgIEJEcm9wZG93blRleHQsXG4gIH0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgb3B0aW9uczogWydBcHBsZScsICdPcmFuZ2UnLCAnQmFuYW5hJywgJ0xpbWUnLCAnUGVhY2gnLCAnQ2hvY29sYXRlJywgJ1N0cmF3YmVycnknXSxcbiAgICBzZWFyY2g6ICcnLFxuICAgIHZhbHVlOiBbXSxcbiAgICBjb2RlQWR2YW5jZUN1c3RvbSxcbiAgfSksXG4gIGNvbXB1dGVkOiB7XG4gICAgY3JpdGVyaWEoKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzZWFyY2ggY3JpdGVyaWFcbiAgICAgIHJldHVybiB0aGlzLnNlYXJjaC50cmltKCkudG9Mb3dlckNhc2UoKVxuICAgIH0sXG4gICAgYXZhaWxhYmxlT3B0aW9ucygpIHtcbiAgICAgIGNvbnN0IHsgY3JpdGVyaWEgfSA9IHRoaXNcblxuICAgICAgLy8gRmlsdGVyIG91dCBhbHJlYWR5IHNlbGVjdGVkIG9wdGlvbnNcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuZmlsdGVyKG9wdCA9PiB0aGlzLnZhbHVlLmluZGV4T2Yob3B0KSA9PT0gLTEpXG4gICAgICBpZiAoY3JpdGVyaWEpIHtcbiAgICAgICAgLy8gU2hvdyBvbmx5IG9wdGlvbnMgdGhhdCBtYXRjaCBjcml0ZXJpYVxuICAgICAgICByZXR1cm4gb3B0aW9ucy5maWx0ZXIob3B0ID0+IG9wdC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoY3JpdGVyaWEpID4gLTEpXG4gICAgICB9XG5cbiAgICAgIC8vIFNob3cgYWxsIG9wdGlvbnMgYXZhaWxhYmxlXG4gICAgICByZXR1cm4gb3B0aW9uc1xuICAgIH0sXG4gICAgc2VhcmNoRGVzYygpIHtcbiAgICAgIGlmICh0aGlzLmNyaXRlcmlhICYmIHRoaXMuYXZhaWxhYmxlT3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdUaGVyZSBhcmUgbm8gdGFncyBtYXRjaGluZyB5b3VyIHNlYXJjaCBjcml0ZXJpYSdcbiAgICAgIH1cbiAgICAgIHJldHVybiAnJ1xuICAgIH0sXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvbk9wdGlvbkNsaWNrKHsgb3B0aW9uLCBhZGRUYWcgfSkge1xuICAgICAgYWRkVGFnKG9wdGlvbilcbiAgICAgIHRoaXMuc2VhcmNoID0gJydcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG4iOwpleHBvcnQgdmFyIGNvZGVCYXNpYyA9ICJcbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8bGFiZWwgZm9yPVwidGFncy1iYXNpY1wiPlR5cGUgYSBuZXcgdGFnIGFuZCBwcmVzcyBlbnRlcjwvbGFiZWw+XG4gICAgPGItZm9ybS10YWdzXG4gICAgICB2LW1vZGVsPVwidmFsdWVcIlxuICAgICAgaW5wdXQtaWQ9XCJ0YWdzLWJhc2ljXCJcbiAgICAgIGNsYXNzPVwibWItMlwiXG4gICAgLz5cbiAgICA8cD5WYWx1ZToge3sgdmFsdWUgfX08L3A+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IEJGb3JtVGFncyB9IGZyb20gJ2Jvb3RzdHJhcC12dWUnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIEJGb3JtVGFncyxcbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICB2YWx1ZTogWydhcHBsZScsICdvcmFuZ2UnXSxcbiAgfSksXG59XG48L3NjcmlwdD5cbiI7CmV4cG9ydCB2YXIgY29kZUN1c3RvbSA9ICJcbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8Yi1mb3JtLWdyb3VwIGxhYmVsPVwiVGFnZ2VkIGlucHV0IHVzaW5nIHNlbGVjdFwiPlxuICAgICAgPCEtLSBwcm9wIGBhZGQtb24gLSBjaGFuZ2VgIGlzIG5lZWRlZCB0byBlbmFibGUgYWRkaW5nIHRhZ3MgdmllIHRoZSBgY2hhbmdlYCBldmVudCAtLT5cbiAgICAgIDxiLWZvcm0tdGFnc1xuICAgICAgICB2LW1vZGVsPVwidmFsdWVcIlxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBhZGQtb24tY2hhbmdlXG4gICAgICAgIG5vLW91dGVyLWZvY3VzXG4gICAgICA+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q9XCJ7IHRhZ3MsIGlucHV0QXR0cnMsIGlucHV0SGFuZGxlcnMsIGRpc2FibGVkLCByZW1vdmVUYWcgfVwiPlxuICAgICAgICAgIDx1bFxuICAgICAgICAgICAgdi1pZj1cInRhZ3MubGVuZ3RoID4gMFwiXG4gICAgICAgICAgICBjbGFzcz1cImxpc3QtaW5saW5lIGQtaW5saW5lLWJsb2NrIG1iLTFcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICB2LWZvcj1cInRhZyBpbiB0YWdzXCJcbiAgICAgICAgICAgICAgOmtleT1cInRhZ1wiXG4gICAgICAgICAgICAgIGNsYXNzPVwibGlzdC1pbmxpbmUtaXRlbVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxiLWZvcm0tdGFnXG4gICAgICAgICAgICAgICAgOnRpdGxlPVwidGFnXCJcbiAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJkaXNhYmxlZFwiXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIEByZW1vdmU9XCJyZW1vdmVUYWcodGFnKVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7eyB0YWcgfX1cbiAgICAgICAgICAgICAgPC9iLWZvcm0tdGFnPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxiLWZvcm0tc2VsZWN0XG4gICAgICAgICAgICB2LWJpbmQ9XCJpbnB1dEF0dHJzXCJcbiAgICAgICAgICAgIDpkaXNhYmxlZD1cImRpc2FibGVkIHx8IGF2YWlsYWJsZU9wdGlvbnMubGVuZ3RoID09PSAwXCJcbiAgICAgICAgICAgIDpvcHRpb25zPVwiYXZhaWxhYmxlT3B0aW9uc1wiXG4gICAgICAgICAgICB2LW9uPVwiaW5wdXRIYW5kbGVyc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpmaXJzdD5cbiAgICAgICAgICAgICAgPCEtLSBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgYnVncyB3aXRoIFNhZmFyaSAtLT5cbiAgICAgICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgICAgIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgQ2hvb3NlIGEgdGFnLi4uXG4gICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2ItZm9ybS1zZWxlY3Q+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2ItZm9ybS10YWdzPlxuICAgIDwvYi1mb3JtLWdyb3VwPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQge0JGb3JtVGFncywgQkZvcm1UYWcsIEJGb3JtR3JvdXAsIEJGb3JtU2VsZWN0fSBmcm9tICdib290c3RyYXAtdnVlJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBCRm9ybVRhZ3MsXG4gICAgQkZvcm1Hcm91cCxcbiAgICBCRm9ybVNlbGVjdCxcbiAgICBCRm9ybVRhZyxcbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICBvcHRpb25zOiBbJ0FwcGxlJywgJ09yYW5nZScsICdCYW5hbmEnLCAnTGltZScsICdQZWFjaCcsICdDaG9jb2xhdGUnLCAnU3RyYXdiZXJyeSddLFxuICAgIHZhbHVlOiBbXSxcbiAgICBjb2RlQ3VzdG9tLFxuICB9KSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBhdmFpbGFibGVPcHRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maWx0ZXIob3B0ID0+IHRoaXMudmFsdWUuaW5kZXhPZihvcHQpID09PSAtMSlcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG4iOwpleHBvcnQgdmFyIGNvZGVEZXRlY3RpbmcgPSAiXG48dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPGxhYmVsIGZvcj1cInRhZ3Mtc3RhdGUtZXZlbnRcIj5FbnRlciB0YWdzPC9sYWJlbD5cbiAgICA8Yi1mb3JtLXRhZ3NcbiAgICAgIHYtbW9kZWw9XCJ0YWdzXCJcbiAgICAgIGlucHV0LWlkPVwidGFncy1zdGF0ZS1ldmVudFwiXG4gICAgICA6dGFnLXZhbGlkYXRvcj1cInZhbGlkYXRvclwiXG4gICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHRhZ3MgKDMtNSBjaGFyYWN0ZXJzKSBzZXBhcmF0ZWQgYnkgc3BhY2VcIlxuICAgICAgc2VwYXJhdG9yPVwiIFwiXG4gICAgICBAdGFnLXN0YXRlPVwib25UYWdTdGF0ZVwiXG4gICAgLz5cbiAgICA8cCBjbGFzcz1cIm10LTJcIj5cbiAgICAgIFRhZ3M6IHt7IHRhZ3MgfX1cbiAgICA8L3A+XG4gICAgPHA+RXZlbnQgdmFsdWVzOjwvcD5cbiAgICA8dWw+XG4gICAgICA8bGk+dmFsaWRUYWdzOiB7eyB2YWxpZFRhZ3MgfX08L2xpPlxuICAgICAgPGxpPmludmFsaWRUYWdzOiB7eyBpbnZhbGlkVGFncyB9fTwvbGk+XG4gICAgICA8bGk+ZHVwbGljYXRlVGFnczoge3sgZHVwbGljYXRlVGFncyB9fTwvbGk+XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgQkZvcm1UYWdzIH0gZnJvbSAnYm9vdHN0cmFwLXZ1ZSdcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQkZvcm1UYWdzLFxuICB9LFxuICBkYXRhOiAoKSA9PiAoe1xuICAgIHRhZ3M6IFtdLFxuICAgIHZhbGlkVGFnczogW10sXG4gICAgaW52YWxpZFRhZ3M6IFtdLFxuICAgIGR1cGxpY2F0ZVRhZ3M6IFtdLFxuICAgIGNvZGVEZXRlY3RpbmcsXG4gIH0pLFxuICBtZXRob2RzOiB7XG4gICAgb25UYWdTdGF0ZSh2YWxpZCwgaW52YWxpZCwgZHVwbGljYXRlKSB7XG4gICAgICB0aGlzLnZhbGlkVGFncyA9IHZhbGlkXG4gICAgICB0aGlzLmludmFsaWRUYWdzID0gaW52YWxpZFxuICAgICAgdGhpcy5kdXBsaWNhdGVUYWdzID0gZHVwbGljYXRlXG4gICAgfSxcbiAgICB2YWxpZGF0b3IodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLmxlbmd0aCA+IDIgJiYgdGFnLmxlbmd0aCA8IDZcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG4iOwpleHBvcnQgdmFyIGNvZGVOYXRpdmVJbnB1dCA9ICJcbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8Yi1mb3JtLXRhZ3NcbiAgICAgIHYtbW9kZWw9XCJ2YWx1ZVwiXG4gICAgICBuby1vdXRlci1mb2N1c1xuICAgID5cbiAgICAgIDx0ZW1wbGF0ZSAjXCJ7IHRhZ3MsIGlucHV0QXR0cnMsIGlucHV0SGFuZGxlcnMsIGFkZFRhZywgcmVtb3ZlVGFnIH1cIj5cbiAgICAgICAgPGItaW5wdXQtZ3JvdXAgYXJpYS1jb250cm9scz1cIm15LWN1c3RvbS10YWdzLWxpc3RcIj5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHYtYmluZD1cImlucHV0QXR0cnNcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJOZXcgdGFnIC0gUHJlc3MgZW50ZXIgdG8gYWRkXCJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgIHYtb249XCJpbnB1dEhhbmRsZXJzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgPGItaW5wdXQtZ3JvdXAtYXBwZW5kPlxuICAgICAgICAgICAgPGItYnV0dG9uXG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkVGFnKClcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBBZGRcbiAgICAgICAgICAgIDwvYi1idXR0b24+XG4gICAgICAgICAgPC9iLWlucHV0LWdyb3VwLWFwcGVuZD5cbiAgICAgICAgPC9iLWlucHV0LWdyb3VwPlxuICAgICAgICA8dWxcbiAgICAgICAgICBpZD1cIm15LWN1c3RvbS10YWdzLWxpc3RcIlxuICAgICAgICAgIGNsYXNzPVwibGlzdC11bnN0eWxlZCBkLWlubGluZS1mbGV4IGZsZXgtd3JhcCBtYi0wXCJcbiAgICAgICAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgICAgICAgIGFyaWEtYXRvbWljPVwiZmFsc2VcIlxuICAgICAgICAgIGFyaWEtcmVsZXZhbnQ9XCJhZGRpdGlvbnMgcmVtb3ZhbHNcIlxuICAgICAgICA+XG4gICAgICAgICAgPCEtLSBBbHdheXMgdXNlIHRoZSB0YWcgdmFsdWUgYXMgdGhlIDprZXksIG5vdCB0aGUgaW5kZXghIC0tPlxuICAgICAgICAgIDwhLS0gT3RoZXJ3aXNlIHNjcmVlbiByZWFkZXJzIHdpbGwgbm90IHJlYWQgdGhlIHRhZ1xuICAgICAgICAgICAgIGFkZGl0aW9ucyBhbmQgcmVtb3ZhbHMgY29ycmVjdGx5IC0tPlxuICAgICAgICAgIDxiLWNhcmRcbiAgICAgICAgICAgIHYtZm9yPVwidGFnIGluIHRhZ3NcIlxuICAgICAgICAgICAgOmlkPVwiYG15LWN1c3RvbS10YWdzLXRhZ18ke3RhZy5yZXBsYWNlKC9cXHMvZywgJ18nKX1fYFwiXG4gICAgICAgICAgICA6a2V5PVwidGFnXCJcbiAgICAgICAgICAgIHRhZz1cImxpXCJcbiAgICAgICAgICAgIGNsYXNzPVwic2hhZG93LW5vbmUgYm9yZGVyIG10LTEgbXItMSBtYi0wXCJcbiAgICAgICAgICAgIGJvZHktY2xhc3M9XCJweS0xIHByLTIgdGV4dC1ub3dyYXBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzdHJvbmc+e3sgdGFnIH19PC9zdHJvbmc+XG4gICAgICAgICAgICA8Yi1idXR0b25cbiAgICAgICAgICAgICAgdmFyaWFudD1cImxpbmtcIlxuICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICA6YXJpYS1jb250cm9scz1cImBteS1jdXN0b20tdGFncy10YWdfJHt0YWcucmVwbGFjZSgvXFxzL2csICdfJyl9X2BcIlxuICAgICAgICAgICAgICBjbGFzcz1cInB5LTBcIlxuICAgICAgICAgICAgICBAY2xpY2s9XCJyZW1vdmVUYWcodGFnKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9iLWJ1dHRvbj5cbiAgICAgICAgICA8L2ItY2FyZD5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9iLWZvcm0tdGFncz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHtcbiAgQkZvcm1UYWdzLCBCSW5wdXRHcm91cCwgQklucHV0R3JvdXBBcHBlbmQsIEJDYXJkLCBCQnV0dG9uLFxufSBmcm9tICdib290c3RyYXAtdnVlJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBCRm9ybVRhZ3MsXG4gICAgQklucHV0R3JvdXAsXG4gICAgQkNhcmQsXG4gICAgQkJ1dHRvbixcbiAgICBCSW5wdXRHcm91cEFwcGVuZCxcbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICB2YWx1ZTogWydhcHBsZScsICdvcmFuZ2UnLCAnYmFuYW5hJywgJ3BlYXInLCAncGVhY2gnXSxcbiAgfSksXG59XG48L3NjcmlwdD5cbiI7CmV4cG9ydCB2YXIgY29kZVJlbW92YWwgPSAiXG48dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPGxhYmVsIGZvcj1cInRhZ3MtcmVtb3ZlLW9uLWRlbGV0ZVwiPkVudGVyIG5ldyB0YWdzIHNlcGFyYXRlZCBieSBzcGFjZTwvbGFiZWw+XG4gICAgPGItZm9ybS10YWdzXG4gICAgICB2LW1vZGVsPVwidmFsdWVcIlxuICAgICAgaW5wdXQtaWQ9XCJ0YWdzLXJlbW92ZS1vbi1kZWxldGVcIlxuICAgICAgOmlucHV0LWF0dHJzPVwieyAnYXJpYS1kZXNjcmliZWRieSc6ICd0YWdzLXJlbW92ZS1vbi1kZWxldGUtaGVscCcgfVwiXG4gICAgICBzZXBhcmF0b3I9XCIgXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgbmV3IHRhZ3Mgc2VwYXJhdGVkIGJ5IHNwYWNlXCJcbiAgICAgIHJlbW92ZS1vbi1kZWxldGVcbiAgICAgIG5vLWFkZC1vbi1lbnRlclxuICAgICAgY2xhc3M9XCJtYi0yXCJcbiAgICAvPlxuICAgIDxiLWZvcm0tdGV4dCBpZD1cInRhZ3MtcmVtb3ZlLW9uLWRlbGV0ZS1oZWxwXCI+XG4gICAgICBQcmVzcyA8a2JkPkJhY2tzcGFjZTwva2JkPiB0byByZW1vdmUgdGhlIGxhc3QgdGFnIGVudGVyZWRcbiAgICA8L2ItZm9ybS10ZXh0PlxuICAgIDxwPlZhbHVlOiB7eyB2YWx1ZSB9fTwvcD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgQkZvcm1UYWdzLCBCRm9ybVRleHQgfSBmcm9tICdib290c3RyYXAtdnVlJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBCRm9ybVRhZ3MsXG4gICAgQkZvcm1UZXh0LFxuICB9LFxuICBkYXRhOiAoKSA9PiAoe1xuICAgIHZhbHVlOiBbJ2FwcGxlJywgJ29yYW5nZScsICdncmFwZSddLFxuICB9KSxcbn1cbjwvc2NyaXB0PlxuIjsKZXhwb3J0IHZhciBjb2RlU2VwYXJhdG9ycyA9ICJcbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8bGFiZWwgZm9yPVwidGFncy1zZXBhcmF0b3JzXCI+RW50ZXIgdGFncyBzZXBhcmF0ZWQgYnkgc3BhY2UsIGNvbW1hIG9yIHNlbWljb2xvbjwvbGFiZWw+XG4gICAgPGItZm9ybS10YWdzXG4gICAgICB2LW1vZGVsPVwidmFsdWVcIlxuICAgICAgaW5wdXQtaWQ9XCJ0YWdzLXNlcGFyYXRvcnNcIlxuICAgICAgc2VwYXJhdG9yPVwiICw7XCJcbiAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgbmV3IHRhZ3Mgc2VwYXJhdGVkIGJ5IHNwYWNlLCBjb21tYSBvciBzZW1pY29sb25cIlxuICAgICAgbm8tYWRkLW9uLWVudGVyXG4gICAgICBjbGFzcz1cIm1iLTJcIlxuICAgIC8+XG4gICAgPHA+VmFsdWU6IHt7IHZhbHVlIH19PC9wPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBCRm9ybVRhZ3MgfSBmcm9tICdib290c3RyYXAtdnVlJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBCRm9ybVRhZ3MsXG4gIH0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgdmFsdWU6IFsnb25lJywgJ3R3byddLFxuICB9KSxcbn1cbjwvc2NyaXB0PlxuXG4iOwpleHBvcnQgdmFyIGNvZGVTdHlsaW5nID0gIlxuPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDxsYWJlbCBmb3I9XCJ0YWdzLXBpbGxzXCI+RW50ZXIgdGFnczwvbGFiZWw+XG4gICAgPGItZm9ybS10YWdzXG4gICAgICB2LW1vZGVsPVwidmFsdWVcIlxuICAgICAgaW5wdXQtaWQ9XCJ0YWdzLXBpbGxzXCJcbiAgICAgIHRhZy12YXJpYW50PVwicHJpbWFyeVwiXG4gICAgICB0YWctcGlsbHNcbiAgICAgIHNpemU9XCJsZ1wiXG4gICAgICBzZXBhcmF0b3I9XCIgXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgbmV3IHRhZ3Mgc2VwYXJhdGVkIGJ5IHNwYWNlXCJcbiAgICAgIGNsYXNzPVwibWItMlwiXG4gICAgLz5cbiAgICA8cD5WYWx1ZToge3sgdmFsdWUgfX08L3A+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IEJGb3JtVGFncyB9IGZyb20gJ2Jvb3RzdHJhcC12dWUnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIEJGb3JtVGFncyxcbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICB2YWx1ZTogWydhcHBsZScsICdvcmFuZ2UnLCAnZ3JhcGUnXSxcbiAgfSksXG59XG48L3NjcmlwdD5cbiI7CmV4cG9ydCB2YXIgY29kZVZhbGlkYXRpb24gPSAiXG48dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPGItZm9ybS1ncm91cFxuICAgICAgOnN0YXRlPVwic3RhdGVcIlxuICAgICAgbGFiZWw9XCJUYWdzIHZhbGlkYXRpb24gZXhhbXBsZVwiXG4gICAgICBsYWJlbC1mb3I9XCJ0YWdzLXZhbGlkYXRpb25cIlxuICAgID5cbiAgICAgIDxiLWZvcm0tdGFnc1xuICAgICAgICB2LW1vZGVsPVwidGFnc1wiXG4gICAgICAgIGlucHV0LWlkPVwidGFncy12YWxpZGF0aW9uXCJcbiAgICAgICAgOmlucHV0LWF0dHJzPVwieyAnYXJpYS1kZXNjcmliZWRieSc6ICd0YWdzLXZhbGlkYXRpb24taGVscCcgfVwiXG4gICAgICAgIDpzdGF0ZT1cInN0YXRlXCJcbiAgICAgICAgOnRhZy12YWxpZGF0b3I9XCJ0YWdWYWxpZGF0b3JcIlxuICAgICAgICBzZXBhcmF0b3I9XCIgXCJcbiAgICAgIC8+XG4gICAgICA8IS0tIFRoZSBmb2xsb3dpbmcgc2xvdHMgYXJlIGZvciBiLWZvcm0tZ3JvdXAgLS0+XG4gICAgICA8dGVtcGxhdGUgI2ludmFsaWQtZmVlZGJhY2s+XG4gICAgICAgIFlvdSBtdXN0IHByb3ZpZGUgYXQgbGVhc3QgMyB0YWdzIGFuZCBubyBtb3JlIHRoYW4gOFxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSAjZGVzY3JpcHRpb24+XG4gICAgICAgIDxkaXYgaWQ9XCJ0YWdzLXZhbGlkYXRpb24taGVscFwiPlxuICAgICAgICAgIFRhZ3MgbXVzdCBiZSAzIHRvIDUgY2hhcmFjdGVycyBpbiBsZW5ndGggYW5kIGFsbCBsb3dlciBjYXNlLiBFbnRlciB0YWdzIHNlcGFyYXRlZCBieSBzcGFjZXMgb3IgcHJlc3MgZW50ZXIuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2ItZm9ybS1ncm91cD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgQkZvcm1UYWdzLCBCRm9ybUdyb3VwIH0gZnJvbSAnYm9vdHN0cmFwLXZ1ZSdcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgQkZvcm1UYWdzLFxuICAgIEJGb3JtR3JvdXAsXG4gIH0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgdGFnczogW10sXG4gICAgZGlydHk6IGZhbHNlLFxuICAgIGNvZGVWYWxpZGF0aW9uLFxuICB9KSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzdGF0ZSgpIHtcbiAgICAgIC8vIE92ZXJhbGwgY29tcG9uZW50IHZhbGlkYXRpb24gc3RhdGVcbiAgICAgIHJldHVybiB0aGlzLmRpcnR5ID8gdGhpcy50YWdzLmxlbmd0aCA+IDIgJiYgdGhpcy50YWdzLmxlbmd0aCA8IDkgOiBudWxsXG4gICAgfSxcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB0YWdzKCkge1xuICAgICAgLy8gU2V0IHRoZSBkaXJ0eSBmbGFnIG9uIGZpcnN0IGNoYW5nZSB0byB0aGUgdGFncyBhcnJheVxuICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcbiAgICB9LFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgdGFnVmFsaWRhdG9yKHRhZykge1xuICAgICAgLy8gSW5kaXZpZHVhbCB0YWcgdmFsaWRhdG9yIGZ1bmN0aW9uXG4gICAgICByZXR1cm4gdGFnID09PSB0YWcudG9Mb3dlckNhc2UoKSAmJiB0YWcubGVuZ3RoID4gMiAmJiB0YWcubGVuZ3RoIDwgNlxuICAgIH0sXG4gIH0sXG59XG48L3NjcmlwdD5cbiI7"},{"version":3,"sources":["/home/lucas/Desktop/test/src/views/forms/form-element/form-tag/code.js"],"names":["codeAdvanceCustom","codeBasic","codeCustom","codeDetecting","codeNativeInput","codeRemoval","codeSeparators","codeStyling","codeValidation"],"mappings":"AAAA,OAAO,IAAMA,iBAAiB,8nHAAvB;AAkIP,OAAO,IAAMC,SAAS,0bAAf;AA2BP,OAAO,IAAMC,UAAU,6/DAAhB;AA4EP,OAAO,IAAMC,aAAa,olCAAnB;AAoDP,OAAO,IAAMC,eAAe,goEAArB;AA8EP,OAAO,IAAMC,WAAW,60BAAjB;AAmCP,OAAO,IAAMC,cAAc,ilBAApB;AA+BP,OAAO,IAAMC,WAAW,kkBAAjB;AA+BP,OAAO,IAAMC,cAAc,8hDAApB","sourcesContent":["export const codeAdvanceCustom = `\n<template>\n  <div>\n    <b-form-group label=\"Tagged input using dropdown\">\n      <b-form-tags\n        v-model=\"value\"\n        no-outer-focus\n      >\n        <template v-slot=\"{ tags, disabled, addTag, removeTag }\">\n          <ul\n            v-if=\"tags.length > 0\"\n            class=\"list-inline d-inline-block mb-1\"\n          >\n            <li\n              v-for=\"tag in tags\"\n              :key=\"tag\"\n              class=\"list-inline-item\"\n            >\n              <b-form-tag\n                :title=\"tag\"\n                :disabled=\"disabled\"\n                variant=\"primary\"\n                @remove=\"removeTag(tag)\"\n              >\n                {{ tag }}\n              </b-form-tag>\n            </li>\n          </ul>\n\n          <b-dropdown\n            size=\"sm\"\n            variant=\"outline-secondary\"\n            block\n            menu-class=\"w-100\"\n          >\n            <template v-slot:button-content>\n              <b-icon icon=\"tag-fill\" /> Choose tags\n            </template>\n            <b-dropdown-form @submit.stop.prevent=\"() => {}\">\n              <b-form-group\n                label-for=\"tag-search-input\"\n                label=\"Search tags\"\n                label-cols-md=\"auto\"\n                class=\"mb-0\"\n                label-size=\"sm\"\n                :description=\"searchDesc\"\n                :disabled=\"disabled\"\n              >\n                <b-form-input\n                  id=\"tag-search-input\"\n                  v-model=\"search\"\n                  type=\"search\"\n                  size=\"sm\"\n                  autocomplete=\"off\"\n                />\n              </b-form-group>\n            </b-dropdown-form>\n            <b-dropdown-divider />\n            <b-dropdown-item\n              v-for=\"option in availableOptions\"\n              :key=\"option\"\n              @click=\"onOptionClick({ option, addTag })\"\n            >\n              {{ option }}\n            </b-dropdown-item>\n            <b-dropdown-text v-if=\"availableOptions.length === 0\">\n              There are no tags available to select\n            </b-dropdown-text>\n          </b-dropdown>\n        </template>\n      </b-form-tags>\n    </b-form-group>\n  </div>\n</template>\n\n<script>\nimport {BFormTags,BFormGroup,BDropdown,BDropdownForm,BFormInput,BDropdownDivider,BDropdownItem,BFormTag,BDropdownText} from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n    BFormGroup,\n    BDropdown,\n    BDropdownForm,\n    BFormInput,\n    BDropdownDivider,\n    BDropdownItem,\n    BFormTag,\n    BDropdownText,\n  },\n  data: () => ({\n    options: ['Apple', 'Orange', 'Banana', 'Lime', 'Peach', 'Chocolate', 'Strawberry'],\n    search: '',\n    value: [],\n    codeAdvanceCustom,\n  }),\n  computed: {\n    criteria() {\n      // Compute the search criteria\n      return this.search.trim().toLowerCase()\n    },\n    availableOptions() {\n      const { criteria } = this\n\n      // Filter out already selected options\n      const options = this.options.filter(opt => this.value.indexOf(opt) === -1)\n      if (criteria) {\n        // Show only options that match criteria\n        return options.filter(opt => opt.toLowerCase().indexOf(criteria) > -1)\n      }\n\n      // Show all options available\n      return options\n    },\n    searchDesc() {\n      if (this.criteria && this.availableOptions.length === 0) {\n        return 'There are no tags matching your search criteria'\n      }\n      return ''\n    },\n  },\n  methods: {\n    onOptionClick({ option, addTag }) {\n      addTag(option)\n      this.search = ''\n    },\n  },\n}\n</script>\n`\nexport const codeBasic = `\n<template>\n  <div>\n    <label for=\"tags-basic\">Type a new tag and press enter</label>\n    <b-form-tags\n      v-model=\"value\"\n      input-id=\"tags-basic\"\n      class=\"mb-2\"\n    />\n    <p>Value: {{ value }}</p>\n  </div>\n</template>\n\n<script>\nimport { BFormTags } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n  },\n  data: () => ({\n    value: ['apple', 'orange'],\n  }),\n}\n</script>\n`\n\nexport const codeCustom = `\n<template>\n  <div>\n    <b-form-group label=\"Tagged input using select\">\n      <!-- prop \\`add-on - change\\` is needed to enable adding tags vie the \\`change\\` event -->\n      <b-form-tags\n        v-model=\"value\"\n        size=\"lg\"\n        add-on-change\n        no-outer-focus\n      >\n        <template v-slot=\"{ tags, inputAttrs, inputHandlers, disabled, removeTag }\">\n          <ul\n            v-if=\"tags.length > 0\"\n            class=\"list-inline d-inline-block mb-1\"\n          >\n            <li\n              v-for=\"tag in tags\"\n              :key=\"tag\"\n              class=\"list-inline-item\"\n            >\n              <b-form-tag\n                :title=\"tag\"\n                :disabled=\"disabled\"\n                variant=\"primary\"\n                @remove=\"removeTag(tag)\"\n              >\n                {{ tag }}\n              </b-form-tag>\n            </li>\n          </ul>\n          <b-form-select\n            v-bind=\"inputAttrs\"\n            :disabled=\"disabled || availableOptions.length === 0\"\n            :options=\"availableOptions\"\n            v-on=\"inputHandlers\"\n          >\n            <template v-slot:first>\n              <!-- This is required to prevent bugs with Safari -->\n              <option\n                disabled\n                value=\"\"\n              >\n                Choose a tag...\n              </option>\n            </template>\n          </b-form-select>\n        </template>\n      </b-form-tags>\n    </b-form-group>\n  </div>\n</template>\n\n<script>\nimport {BFormTags, BFormTag, BFormGroup, BFormSelect} from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n    BFormGroup,\n    BFormSelect,\n    BFormTag,\n  },\n  data: () => ({\n    options: ['Apple', 'Orange', 'Banana', 'Lime', 'Peach', 'Chocolate', 'Strawberry'],\n    value: [],\n    codeCustom,\n  }),\n  computed: {\n    availableOptions() {\n      return this.options.filter(opt => this.value.indexOf(opt) === -1)\n    },\n  },\n}\n</script>\n`\nexport const codeDetecting = `\n<template>\n  <div>\n    <label for=\"tags-state-event\">Enter tags</label>\n    <b-form-tags\n      v-model=\"tags\"\n      input-id=\"tags-state-event\"\n      :tag-validator=\"validator\"\n      placeholder=\"Enter tags (3-5 characters) separated by space\"\n      separator=\" \"\n      @tag-state=\"onTagState\"\n    />\n    <p class=\"mt-2\">\n      Tags: {{ tags }}\n    </p>\n    <p>Event values:</p>\n    <ul>\n      <li>validTags: {{ validTags }}</li>\n      <li>invalidTags: {{ invalidTags }}</li>\n      <li>duplicateTags: {{ duplicateTags }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { BFormTags } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n  },\n  data: () => ({\n    tags: [],\n    validTags: [],\n    invalidTags: [],\n    duplicateTags: [],\n    codeDetecting,\n  }),\n  methods: {\n    onTagState(valid, invalid, duplicate) {\n      this.validTags = valid\n      this.invalidTags = invalid\n      this.duplicateTags = duplicate\n    },\n    validator(tag) {\n      return tag.length > 2 && tag.length < 6\n    },\n  },\n}\n</script>\n`\n\nexport const codeNativeInput = `\n<template>\n  <div>\n    <b-form-tags\n      v-model=\"value\"\n      no-outer-focus\n    >\n      <template #\"{ tags, inputAttrs, inputHandlers, addTag, removeTag }\">\n        <b-input-group aria-controls=\"my-custom-tags-list\">\n          <input\n            v-bind=\"inputAttrs\"\n            placeholder=\"New tag - Press enter to add\"\n            class=\"form-control\"\n            v-on=\"inputHandlers\"\n          >\n          <b-input-group-append>\n            <b-button\n              variant=\"primary\"\n              @click=\"addTag()\"\n            >\n              Add\n            </b-button>\n          </b-input-group-append>\n        </b-input-group>\n        <ul\n          id=\"my-custom-tags-list\"\n          class=\"list-unstyled d-inline-flex flex-wrap mb-0\"\n          aria-live=\"polite\"\n          aria-atomic=\"false\"\n          aria-relevant=\"additions removals\"\n        >\n          <!-- Always use the tag value as the :key, not the index! -->\n          <!-- Otherwise screen readers will not read the tag\n             additions and removals correctly -->\n          <b-card\n            v-for=\"tag in tags\"\n            :id=\"\\`my-custom-tags-tag_\\${tag.replace(/\\\\s/g, '_')}_\\`\"\n            :key=\"tag\"\n            tag=\"li\"\n            class=\"shadow-none border mt-1 mr-1 mb-0\"\n            body-class=\"py-1 pr-2 text-nowrap\"\n          >\n            <strong>{{ tag }}</strong>\n            <b-button\n              variant=\"link\"\n              size=\"sm\"\n              :aria-controls=\"\\`my-custom-tags-tag_\\${tag.replace(/\\\\s/g, '_')}_\\`\"\n              class=\"py-0\"\n              @click=\"removeTag(tag)\"\n            >\n              remove\n            </b-button>\n          </b-card>\n        </ul>\n      </template>\n    </b-form-tags>\n  </div>\n</template>\n\n<script>\nimport {\n  BFormTags, BInputGroup, BInputGroupAppend, BCard, BButton,\n} from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n    BInputGroup,\n    BCard,\n    BButton,\n    BInputGroupAppend,\n  },\n  data: () => ({\n    value: ['apple', 'orange', 'banana', 'pear', 'peach'],\n  }),\n}\n</script>\n`\nexport const codeRemoval = `\n<template>\n  <div>\n    <label for=\"tags-remove-on-delete\">Enter new tags separated by space</label>\n    <b-form-tags\n      v-model=\"value\"\n      input-id=\"tags-remove-on-delete\"\n      :input-attrs=\"{ 'aria-describedby': 'tags-remove-on-delete-help' }\"\n      separator=\" \"\n      placeholder=\"Enter new tags separated by space\"\n      remove-on-delete\n      no-add-on-enter\n      class=\"mb-2\"\n    />\n    <b-form-text id=\"tags-remove-on-delete-help\">\n      Press <kbd>Backspace</kbd> to remove the last tag entered\n    </b-form-text>\n    <p>Value: {{ value }}</p>\n  </div>\n</template>\n\n<script>\nimport { BFormTags, BFormText } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n    BFormText,\n  },\n  data: () => ({\n    value: ['apple', 'orange', 'grape'],\n  }),\n}\n</script>\n`\nexport const codeSeparators = `\n<template>\n  <div>\n    <label for=\"tags-separators\">Enter tags separated by space, comma or semicolon</label>\n    <b-form-tags\n      v-model=\"value\"\n      input-id=\"tags-separators\"\n      separator=\" ,;\"\n      placeholder=\"Enter new tags separated by space, comma or semicolon\"\n      no-add-on-enter\n      class=\"mb-2\"\n    />\n    <p>Value: {{ value }}</p>\n  </div>\n</template>\n\n<script>\nimport { BFormTags } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n  },\n  data: () => ({\n    value: ['one', 'two'],\n  }),\n}\n</script>\n\n`\n\nexport const codeStyling = `\n<template>\n  <div>\n    <label for=\"tags-pills\">Enter tags</label>\n    <b-form-tags\n      v-model=\"value\"\n      input-id=\"tags-pills\"\n      tag-variant=\"primary\"\n      tag-pills\n      size=\"lg\"\n      separator=\" \"\n      placeholder=\"Enter new tags separated by space\"\n      class=\"mb-2\"\n    />\n    <p>Value: {{ value }}</p>\n  </div>\n</template>\n\n<script>\nimport { BFormTags } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n  },\n  data: () => ({\n    value: ['apple', 'orange', 'grape'],\n  }),\n}\n</script>\n`\nexport const codeValidation = `\n<template>\n  <div>\n    <b-form-group\n      :state=\"state\"\n      label=\"Tags validation example\"\n      label-for=\"tags-validation\"\n    >\n      <b-form-tags\n        v-model=\"tags\"\n        input-id=\"tags-validation\"\n        :input-attrs=\"{ 'aria-describedby': 'tags-validation-help' }\"\n        :state=\"state\"\n        :tag-validator=\"tagValidator\"\n        separator=\" \"\n      />\n      <!-- The following slots are for b-form-group -->\n      <template #invalid-feedback>\n        You must provide at least 3 tags and no more than 8\n      </template>\n      <template #description>\n        <div id=\"tags-validation-help\">\n          Tags must be 3 to 5 characters in length and all lower case. Enter tags separated by spaces or press enter.\n        </div>\n      </template>\n    </b-form-group>\n  </div>\n</template>\n\n<script>\nimport { BFormTags, BFormGroup } from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BFormTags,\n    BFormGroup,\n  },\n  data: () => ({\n    tags: [],\n    dirty: false,\n    codeValidation,\n  }),\n  computed: {\n    state() {\n      // Overall component validation state\n      return this.dirty ? this.tags.length > 2 && this.tags.length < 9 : null\n    },\n  },\n  watch: {\n    tags() {\n      // Set the dirty flag on first change to the tags array\n      this.dirty = true\n    },\n  },\n  methods: {\n    tagValidator(tag) {\n      // Individual tag validator function\n      return tag === tag.toLowerCase() && tag.length > 2 && tag.length < 6\n    },\n  },\n}\n</script>\n`\n"]}]}