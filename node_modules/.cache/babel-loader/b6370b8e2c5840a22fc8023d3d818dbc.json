{"remainingRequest":"/home/lucas/Desktop/test/node_modules/babel-loader/lib/index.js!/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/lucas/Desktop/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lucas/Desktop/test/node_modules/vue-echarts/components/ECharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lucas/Desktop/test/node_modules/vue-echarts/components/ECharts.vue","mtime":1646760975702},{"path":"/home/lucas/Desktop/test/babel.config.js","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/babel-loader/lib/index.js","mtime":1646760975446},{"path":"/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/index.js","mtime":1646760975666}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["props","options","theme","initOptions","group","autoresize","watchShallow","manualUpdate","data","lastArea","watch","methods","mergeOptions","notMerge","lazyUpdate","appendData","params","resize","dispatchAction","payload","convertToPixel","finder","value","convertFromPixel","containPixel","showLoading","type","hideLoading","getDataURL","getConnectedDataURL","clear","dispose","delegateMethod","name","args","delegateGet","methodName","getArea","init","chart","Object","leading","addListener","width","configurable","get","height","isDisposed","computedOptions","initOptionsWatcher","deep","destroy","removeListener","refresh","created","INIT_TRIGGERS","prop","REWATCH_TRIGGERS","mounted","activated","destroyed","connect","echarts","disconnect","registerMap","mapName","geoJSON","specialAreas","registerTheme","graphic"],"sourceRoot":"node_modules/vue-echarts/components","sources":["ECharts.vue"],"sourcesContent":["<template>\n  <div class=\"echarts\" />\n</template>\n\n<style>\n.echarts {\n  width: 600px;\n  height: 400px;\n}\n</style>\n\n<script>\nimport echarts from 'echarts/lib/echarts'\nimport debounce from 'lodash/debounce'\nimport { addListener, removeListener } from 'resize-detector'\n\nconst INIT_TRIGGERS = ['theme', 'initOptions', 'autoresize']\nconst REWATCH_TRIGGERS = ['manualUpdate', 'watchShallow']\n\nexport default {\n  props: {\n    options: Object,\n    theme: [String, Object],\n    initOptions: Object,\n    group: String,\n    autoresize: Boolean,\n    watchShallow: Boolean,\n    manualUpdate: Boolean\n  },\n  data () {\n    return {\n      lastArea: 0\n    }\n  },\n  watch: {\n    group (group) {\n      this.chart.group = group\n    }\n  },\n  methods: {\n    // provide an explicit merge option method\n    mergeOptions (options, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = options\n      }\n\n      if (!this.chart) {\n        this.init(options)\n      } else {\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate)\n      }\n    },\n    // just delegates ECharts methods to Vue component\n    // use explicit params to reduce transpiled size for now\n    appendData (params) {\n      this.delegateMethod('appendData', params)\n    },\n    resize (options) {\n      this.delegateMethod('resize', options)\n    },\n    dispatchAction (payload) {\n      this.delegateMethod('dispatchAction', payload)\n    },\n    convertToPixel (finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value)\n    },\n    convertFromPixel (finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value)\n    },\n    containPixel (finder, value) {\n      return this.delegateMethod('containPixel', finder, value)\n    },\n    showLoading (type, options) {\n      this.delegateMethod('showLoading', type, options)\n    },\n    hideLoading () {\n      this.delegateMethod('hideLoading')\n    },\n    getDataURL (options) {\n      return this.delegateMethod('getDataURL', options)\n    },\n    getConnectedDataURL (options) {\n      return this.delegateMethod('getConnectedDataURL', options)\n    },\n    clear () {\n      this.delegateMethod('clear')\n    },\n    dispose () {\n      this.delegateMethod('dispose')\n    },\n    delegateMethod (name, ...args) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[name](...args)\n    },\n    delegateGet (methodName) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[methodName]()\n    },\n    getArea () {\n      return this.$el.offsetWidth * this.$el.offsetHeight\n    },\n    init (options) {\n      if (this.chart) {\n        return\n      }\n\n      const chart = echarts.init(this.$el, this.theme, this.initOptions)\n\n      if (this.group) {\n        chart.group = this.group\n      }\n\n      chart.setOption(options || this.manualOptions || this.options || {}, true)\n\n      Object.keys(this.$listeners).forEach(event => {\n        const handler = this.$listeners[event]\n\n        if (event.indexOf('zr:') === 0) {\n          chart.getZr().on(event.slice(3), handler)\n        } else {\n          chart.on(event, handler)\n        }\n      })\n\n      if (this.autoresize) {\n        this.lastArea = this.getArea()\n        this.__resizeHandler = debounce(\n          () => {\n            if (this.lastArea === 0) {\n              // emulate initial render for initially hidden charts\n              this.mergeOptions({}, true)\n              this.resize()\n              this.mergeOptions(this.options || this.manualOptions || {}, true)\n            } else {\n              this.resize()\n            }\n            this.lastArea = this.getArea()\n          },\n          100,\n          { leading: true }\n        )\n        addListener(this.$el, this.__resizeHandler)\n      }\n\n      Object.defineProperties(this, {\n        // Only recalculated when accessed from JavaScript.\n        // Won't update DOM on value change because getters\n        // don't depend on reactive values\n        width: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getWidth')\n          }\n        },\n        height: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getHeight')\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: () => {\n            return !!this.delegateGet('isDisposed')\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getOption')\n          }\n        }\n      })\n\n      this.chart = chart\n    },\n    initOptionsWatcher () {\n      if (this.__unwatchOptions) {\n        this.__unwatchOptions()\n        this.__unwatchOptions = null\n      }\n\n      if (!this.manualUpdate) {\n        this.__unwatchOptions = this.$watch(\n          'options',\n          (val, oldVal) => {\n            if (!this.chart && val) {\n              this.init()\n            } else {\n              // mutating `options` will lead to merging\n              // replacing it with new reference will lead to not merging\n              // eg.\n              // `this.options = Object.assign({}, this.options, { ... })`\n              // will trigger `this.chart.setOption(val, true)\n              // `this.options.title.text = 'Trends'`\n              // will trigger `this.chart.setOption(val, false)`\n              this.chart.setOption(val, val !== oldVal)\n            }\n          },\n          { deep: !this.watchShallow }\n        )\n      }\n    },\n    destroy () {\n      if (this.autoresize) {\n        removeListener(this.$el, this.__resizeHandler)\n      }\n      this.dispose()\n      this.chart = null\n    },\n    refresh () {\n      if (this.chart) {\n        this.destroy()\n        this.init()\n      }\n    }\n  },\n  created () {\n    this.initOptionsWatcher()\n\n    INIT_TRIGGERS.forEach(prop => {\n      this.$watch(\n        prop,\n        () => {\n          this.refresh()\n        },\n        { deep: true }\n      )\n    })\n\n    REWATCH_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.initOptionsWatcher()\n        this.refresh()\n      })\n    })\n  },\n  mounted () {\n    // auto init if `options` is already provided\n    if (this.options) {\n      this.init()\n    }\n  },\n  activated () {\n    if (this.autoresize) {\n      this.chart && this.chart.resize()\n    }\n  },\n  destroyed () {\n    if (this.chart) {\n      this.destroy()\n    }\n  },\n  connect (group) {\n    if (typeof group !== 'string') {\n      group = group.map(chart => chart.chart)\n    }\n    echarts.connect(group)\n  },\n  disconnect (group) {\n    echarts.disConnect(group)\n  },\n  registerMap (mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas)\n  },\n  registerTheme (name, theme) {\n    echarts.registerTheme(name, theme)\n  },\n  graphic: echarts.graphic\n}\n</script>\n"]}]}