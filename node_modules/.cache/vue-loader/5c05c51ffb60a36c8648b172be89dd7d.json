{"remainingRequest":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lucas/Desktop/test/src/views/apps/email/Email.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/home/lucas/Desktop/test/src/views/apps/email/Email.vue","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/node_modules/css-loader/dist/cjs.js","mtime":1646760975182},{"path":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1646760975954},{"path":"/home/lucas/Desktop/test/node_modules/postcss-loader/src/index.js","mtime":1646760975438},{"path":"/home/lucas/Desktop/test/node_modules/sass-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/index.js","mtime":1646760975666}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAifkBjb3JlL3Njc3MvYmFzZS9wYWdlcy9hcHAtZW1haWwuc2NzcyI7Cg=="},{"version":3,"sources":["Email.vue"],"names":[],"mappingsqiBA","file":"Email.vue","sourceRoot":"src/views/apps/email","sourcesContent":["<template>\n  <!-- Need to add height inherit because Vue 2 don't support multiple root ele -->\n  <div style=\"height: inherit\">\n    <div\n      class=\"body-content-overlay\"\n      :class=\"{'show': mqShallShowLeftSidebar}\"\n      @click=\"mqShallShowLeftSidebar = false\"\n    />\n\n    <!-- Email List -->\n    <div class=\"email-app-list\">\n\n      <!-- App Searchbar Header -->\n      <div class=\"app-fixed-search d-flex align-items-center\">\n\n        <!-- Toggler -->\n        <div class=\"sidebar-toggle d-block d-lg-none ml-1\">\n          <feather-icon\n            icon=\"MenuIcon\"\n            size=\"21\"\n            class=\"cursor-pointer\"\n            @click=\"mqShallShowLeftSidebar = true\"\n          />\n        </div>\n\n        <!-- Searchbar -->\n        <div class=\"d-flex align-content-center justify-content-between w-100\">\n          <b-input-group class=\"input-group-merge\">\n            <b-input-group-prepend is-text>\n              <feather-icon\n                icon=\"SearchIcon\"\n                class=\"text-muted\"\n              />\n            </b-input-group-prepend>\n            <b-form-input\n              :value=\"searchQuery\"\n              placeholder=\"Search email\"\n              @input=\"updateRouteQuery\"\n            />\n          </b-input-group>\n        </div>\n      </div>\n\n      <!-- App Action Bar -->\n      <div class=\"app-action\">\n        <div class=\"action-left\">\n          <b-form-checkbox\n            :checked=\"selectAllEmailCheckbox\"\n            :indeterminate=\"isSelectAllEmailCheckboxIndeterminate\"\n            @change=\"selectAllCheckboxUpdate\"\n          >\n            Select All\n          </b-form-checkbox>\n        </div>\n        <div\n          v-show=\"selectedEmails.length\"\n          class=\"align-items-center\"\n          :class=\"{'d-flex': selectedEmails.length}\"\n        >\n\n          <!-- Update Mail Folder Dropdown -->\n          <b-dropdown\n            variant=\"link\"\n            no-caret\n            toggle-class=\"p-0\"\n            right\n          >\n            <template #button-content>\n              <feather-icon\n                icon=\"FolderIcon\"\n                size=\"17\"\n                class=\"align-middle text-body\"\n              />\n            </template>\n\n            <b-dropdown-item @click=\"moveSelectedEmailsToFolder('draft')\">\n              <feather-icon icon=\"Edit2Icon\" />\n              <span class=\"align-middle ml-50\">Draft</span>\n            </b-dropdown-item>\n\n            <b-dropdown-item @click=\"moveSelectedEmailsToFolder('spam')\">\n              <feather-icon icon=\"InfoIcon\" />\n              <span class=\"align-middle ml-50\">Spam</span>\n            </b-dropdown-item>\n\n            <b-dropdown-item\n              v-show=\"$route.params.folder !== 'trash'\"\n              @click=\"moveSelectedEmailsToFolder('trash')\"\n            >\n              <feather-icon icon=\"TrashIcon\" />\n              <span class=\"align-middle ml-50\">Trash</span>\n            </b-dropdown-item>\n          </b-dropdown>\n\n          <!-- Update Mail Folder Dropdown -->\n          <b-dropdown\n            variant=\"link\"\n            no-caret\n            toggle-class=\"p-0\"\n            class=\"ml-1\"\n            right\n          >\n            <template #button-content>\n              <feather-icon\n                icon=\"TagIcon\"\n                size=\"17\"\n                class=\"align-middle text-body\"\n              />\n            </template>\n            <b-dropdown-item @click=\"updateSelectedEmailsLabel('personal')\">\n              <span class=\"mr-50 bullet bullet-success bullet-sm\" />\n              <span>Personal</span>\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"updateSelectedEmailsLabel('company')\">\n              <span class=\"mr-50 bullet bullet-primary bullet-sm\" />\n              <span>Company</span>\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"updateSelectedEmailsLabel('important')\">\n              <span class=\"mr-50 bullet bullet-warning bullet-sm\" />\n              <span>Important</span>\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"updateSelectedEmailsLabel('private')\">\n              <span class=\"mr-50 bullet bullet-danger bullet-sm\" />\n              <span>Private</span>\n            </b-dropdown-item>\n          </b-dropdown>\n\n          <feather-icon\n            icon=\"MailIcon\"\n            size=\"17\"\n            class=\"cursor-pointer ml-1\"\n            @click=\"markSelectedEmailsAsUnread\"\n          />\n\n          <feather-icon\n            v-show=\"$route.params.folder !== 'trash'\"\n            icon=\"TrashIcon\"\n            size=\"17\"\n            class=\"cursor-pointer ml-1\"\n            @click=\"moveSelectedEmailsToFolder('trash')\"\n          />\n\n        </div>\n      </div>\n\n      <!-- Emails List -->\n      <vue-perfect-scrollbar\n        :settings=\"perfectScrollbarSettings\"\n        class=\"email-user-list scroll-area\"\n      >\n        <ul class=\"email-media-list\">\n          <b-media\n            v-for=\"email in emails\"\n            :key=\"email.id\"\n            tag=\"li\"\n            no-body\n            :class=\"{ 'mail-read': email.isRead }\"\n            @click=\"updateEmailViewData(email)\"\n          >\n\n            <b-media-aside class=\"media-left mr-50\">\n              <b-avatar\n                class=\"avatar\"\n                size=\"40\"\n                variant=\"primary\"\n                :src=\"email.from.avatar\"\n              />\n              <div class=\"user-action\">\n                <b-form-checkbox\n                  :checked=\"selectedEmails.includes(email.id)\"\n                  @change=\"toggleSelectedMail(email.id)\"\n                  @click.native.stop\n                />\n                <div class=\"email-favorite\">\n                  <feather-icon\n                    icon=\"StarIcon\"\n                    size=\"17\"\n                    :class=\"{ 'text-warning fill-current': email.isStarred }\"\n                    @click.stop=\"toggleStarred(email)\"\n                  />\n                </div>\n              </div>\n            </b-media-aside>\n\n            <b-media-body>\n              <div class=\"mail-details\">\n                <div class=\"mail-items\">\n                  <h5 class=\"mb-25\">\n                    {{ email.from.name }}\n                  </h5>\n                  <span class=\"text-truncate\">{{ email.subject }}</span>\n                </div>\n                <div class=\"mail-meta-item\">\n                  <feather-icon\n                    v-if=\"email.attachments.length\"\n                    icon=\"PaperclipIcon\"\n                  />\n                  <span\n                    v-for=\"label in email.labels\"\n                    :key=\"label\"\n                    class=\"mx-50 bullet bullet-sm\"\n                    :class=\"`bullet-${resolveLabelColor(label)}`\"\n                  />\n                  <span class=\"mail-date\">{{ formatDateToMonthShort(email.time, { hour: 'numeric', minute: 'numeric', }) }}</span>\n                </div>\n              </div>\n\n              <div class=\"mail-message\">\n                <p class=\"text-truncate mb-0\">\n                  {{ filterTags(email.message) }}\n                </p>\n              </div>\n            </b-media-body>\n          </b-media>\n        </ul>\n        <div\n          class=\"no-results\"\n          :class=\"{'show': !emails.length}\"\n        >\n          <h5>No Items Found</h5>\n        </div>\n      </vue-perfect-scrollbar>\n    </div>\n\n    <!-- Email View/Detail -->\n    <email-view\n      :class=\"{'show': showEmailDetails}\"\n      :email-view-data=\"emailViewData\"\n      :opended-email-meta=\"opendedEmailMeta\"\n      @close-email-view=\"showEmailDetails = false\"\n      @move-email-to-folder=\"moveOpenEmailToFolder\"\n      @toggle-email-starred=\"toggleStarred(emailViewData)\"\n      @update-email-label=\"updateOpenEmailLabel\"\n      @mark-email-unread=\"markOpenEmailAsUnread\"\n      @change-opened-email=\"changeOpenedEmail\"\n    />\n\n    <!-- Sidebar -->\n    <portal to=\"content-renderer-sidebar-left\">\n      <email-left-sidebar\n        :shall-show-email-compose-modal.sync=\"shallShowEmailComposeModal\"\n        :emails-meta=\"emailsMeta\"\n        :class=\"{'show': mqShallShowLeftSidebar}\"\n        @close-left-sidebar=\"mqShallShowLeftSidebar = false\"\n      />\n    </portal>\n\n    <!-- Compose Email Modal -->\n    <email-compose v-model=\"shallShowEmailComposeModal\" />\n  </div>\n</template>\n\n<script>\nimport store from '@/store'\nimport {\n  ref, onUnmounted, computed, watch,\n  // ref, watch, computed, onUnmounted,\n} from '@vue/composition-api'\nimport {\n  BFormInput, BInputGroup, BInputGroupPrepend, BDropdown, BDropdownItem,\n  BFormCheckbox, BMedia, BMediaAside, BMediaBody, BAvatar,\n} from 'bootstrap-vue'\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport { filterTags, formatDateToMonthShort } from '@core/utils/filter'\nimport { useRouter } from '@core/utils/utils'\nimport { useResponsiveAppLeftSidebarVisibility } from '@core/comp-functions/ui/app'\nimport EmailLeftSidebar from './EmailLeftSidebar.vue'\nimport EmailView from './EmailView.vue'\nimport emailStoreModule from './emailStoreModule'\nimport useEmail from './useEmail'\nimport EmailCompose from './EmailCompose.vue'\n\nexport default {\n  components: {\n    BFormInput,\n    BInputGroup,\n    BInputGroupPrepend,\n    BDropdown,\n    BDropdownItem,\n    BFormCheckbox,\n    BMedia,\n    BMediaAside,\n    BMediaBody,\n    BAvatar,\n\n    // 3rd Party\n    VuePerfectScrollbar,\n\n    // App SFC\n    EmailLeftSidebar,\n    EmailView,\n    EmailCompose,\n  },\n  setup() {\n    const EMAIL_APP_STORE_MODULE_NAME = 'app-email'\n\n    // Register module\n    if (!store.hasModule(EMAIL_APP_STORE_MODULE_NAME)) store.registerModule(EMAIL_APP_STORE_MODULE_NAME, emailStoreModule)\n\n    // UnRegister on leave\n    onUnmounted(() => {\n      if (store.hasModule(EMAIL_APP_STORE_MODULE_NAME)) store.unregisterModule(EMAIL_APP_STORE_MODULE_NAME)\n    })\n\n    const { route, router } = useRouter()\n    const { resolveLabelColor } = useEmail()\n\n    // Route Params\n    const routeParams = computed(() => route.value.params)\n    watch(routeParams, () => {\n      // eslint-disable-next-line no-use-before-define\n      fetchEmails()\n    })\n\n    // Emails & EmailsMeta\n    const emails = ref([])\n    const emailsMeta = ref({})\n\n    const perfectScrollbarSettings = {\n      maxScrollbarLength: 150,\n    }\n\n    // Search Query\n    const routeQuery = computed(() => route.value.query.q)\n    const searchQuery = ref(routeQuery.value)\n    watch(routeQuery, val => {\n      searchQuery.value = val\n    })\n    // eslint-disable-next-line no-use-before-define\n    watch(searchQuery, () => fetchEmails())\n    const updateRouteQuery = val => {\n      const currentRouteQuery = JSON.parse(JSON.stringify(route.value.query))\n\n      if (val) currentRouteQuery.q = val\n      else delete currentRouteQuery.q\n\n      router.replace({ name: route.name, query: currentRouteQuery })\n    }\n\n    const fetchEmails = () => {\n      store.dispatch('app-email/fetchEmails', {\n        q: searchQuery.value,\n        folder: router.currentRoute.params.folder || 'inbox',\n        label: router.currentRoute.params.label,\n      })\n        .then(response => {\n          emails.value = response.data.emails\n          emailsMeta.value = response.data.emailsMeta\n        })\n    }\n\n    fetchEmails()\n\n    // ------------------------------------------------\n    // Mail Selection\n    // ------------------------------------------------\n    const selectedEmails = ref([])\n    const toggleSelectedMail = mailId => {\n      const mailIndex = selectedEmails.value.indexOf(mailId)\n\n      if (mailIndex === -1) selectedEmails.value.push(mailId)\n      else selectedEmails.value.splice(mailIndex, 1)\n    }\n    const selectAllEmailCheckbox = computed(() => emails.value.length && (emails.value.length === selectedEmails.value.length))\n    const isSelectAllEmailCheckboxIndeterminate = computed(() => Boolean(selectedEmails.value.length) && emails.value.length !== selectedEmails.value.length)\n    const selectAllCheckboxUpdate = val => {\n      selectedEmails.value = val ? emails.value.map(mail => mail.id) : []\n    }\n    // ? Watcher to reset selectedEmails is somewhere below due to watch dependecy fullfilment\n\n    // ------------------------------------------------\n    // Mail Actions\n    // ------------------------------------------------\n    const toggleStarred = email => {\n      store.dispatch('app-email/updateEmail', {\n        emailIds: [email.id],\n        dataToUpdate: { isStarred: !email.isStarred },\n      }).then(() => {\n        // eslint-disable-next-line no-param-reassign\n        email.isStarred = !email.isStarred\n      })\n    }\n\n    const moveSelectedEmailsToFolder = folder => {\n      store.dispatch('app-email/updateEmail', {\n        emailIds: selectedEmails.value,\n        dataToUpdate: { folder },\n      })\n        .then(() => { fetchEmails() })\n        .finally(() => { selectedEmails.value = [] })\n    }\n\n    const updateSelectedEmailsLabel = label => {\n      store.dispatch('app-email/updateEmailLabels', {\n        emailIds: selectedEmails.value,\n        label,\n      })\n        .then(() => { fetchEmails() })\n        .finally(() => { selectedEmails.value = [] })\n    }\n\n    const markSelectedEmailsAsUnread = () => {\n      store.dispatch('app-email/updateEmail', {\n        emailIds: selectedEmails.value,\n        dataToUpdate: { isRead: false },\n      })\n        .then(() => { fetchEmails() })\n        .finally(() => { selectedEmails.value = [] })\n    }\n\n    // ------------------------------------------------\n    // Email Details\n    // ------------------------------------------------\n    const showEmailDetails = ref(false)\n    const emailViewData = ref({})\n    const opendedEmailMeta = computed(() => {\n      const openedEmailIndex = emails.value.findIndex(e => e.id === emailViewData.value.id)\n      return {\n        hasNextEmail: Boolean(emails.value[openedEmailIndex + 1]),\n        hasPreviousEmail: Boolean(emails.value[openedEmailIndex - 1]),\n      }\n    })\n    const updateEmailViewData = email => {\n      // Mark email is read\n      store.dispatch('app-email/updateEmail', {\n        emailIds: [email.id],\n        dataToUpdate: { isRead: true },\n      })\n        .then(() => {\n          // If opened email is unread then decrease badge count for email meta based on email folder\n          if (!email.isRead && (email.folder === 'inbox' || email.folder === 'spam')) {\n            emailsMeta.value[email.folder] -= 1\n          }\n\n          // eslint-disable-next-line no-param-reassign\n          email.isRead = true\n        })\n        .finally(() => {\n          emailViewData.value = email\n          showEmailDetails.value = true\n        })\n    }\n    const moveOpenEmailToFolder = folder => {\n      selectedEmails.value = [emailViewData.value.id]\n      moveSelectedEmailsToFolder(folder)\n      selectedEmails.value = []\n      showEmailDetails.value = false\n    }\n    const updateOpenEmailLabel = label => {\n      selectedEmails.value = [emailViewData.value.id]\n      updateSelectedEmailsLabel(label)\n\n      // Update label in opened email\n      const labelIndex = emailViewData.value.labels.indexOf(label)\n      if (labelIndex === -1) emailViewData.value.labels.push(label)\n      else emailViewData.value.labels.splice(labelIndex, 1)\n\n      selectedEmails.value = []\n    }\n\n    const markOpenEmailAsUnread = () => {\n      selectedEmails.value = [emailViewData.value.id]\n      markSelectedEmailsAsUnread()\n\n      selectedEmails.value = []\n      showEmailDetails.value = false\n    }\n\n    const changeOpenedEmail = dir => {\n      const openedEmailIndex = emails.value.findIndex(e => e.id === emailViewData.value.id)\n      const newEmailIndex = dir === 'previous' ? openedEmailIndex - 1 : openedEmailIndex + 1\n      emailViewData.value = emails.value[newEmailIndex]\n    }\n\n    // * If someone clicks on filter while viewing detail => Close the email detail view\n    watch(routeParams, () => {\n      showEmailDetails.value = false\n    })\n\n    // * Watcher to reset selectedEmails\n    // ? You can also use showEmailDetails (instead of `emailViewData`) but it will trigger execution twice in this case\n    // eslint-disable-next-line no-use-before-define\n    watch([emailViewData, routeParams], () => {\n      selectedEmails.value = []\n    })\n\n    // Compose\n    const shallShowEmailComposeModal = ref(false)\n\n    // Left Sidebar Responsiveness\n    const { mqShallShowLeftSidebar } = useResponsiveAppLeftSidebarVisibility()\n\n    return {\n      // UI\n      perfectScrollbarSettings,\n\n      // Emails & EmailsMeta\n      emails,\n      emailsMeta,\n\n      // Mail Selection\n      selectAllEmailCheckbox,\n      isSelectAllEmailCheckboxIndeterminate,\n      selectedEmails,\n      toggleSelectedMail,\n      selectAllCheckboxUpdate,\n\n      // Mail Actions\n      toggleStarred,\n      moveSelectedEmailsToFolder,\n      updateSelectedEmailsLabel,\n      markSelectedEmailsAsUnread,\n\n      // Email Details\n      showEmailDetails,\n      emailViewData,\n      opendedEmailMeta,\n      updateEmailViewData,\n      moveOpenEmailToFolder,\n      updateOpenEmailLabel,\n      markOpenEmailAsUnread,\n      changeOpenedEmail,\n\n      // Search Query\n      searchQuery,\n      updateRouteQuery,\n\n      // UI Filters\n      filterTags,\n      formatDateToMonthShort,\n\n      // useEmail\n      resolveLabelColor,\n\n      // Compose\n      shallShowEmailComposeModal,\n\n      // Left Sidebar Responsiveness\n      mqShallShowLeftSidebar,\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n<style lang=\"scss\">\n@import \"~@core/scss/base/pages/app-email.scss\";\n</style>\n"]}]}