{"remainingRequest":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lucas/Desktop/test/src/views/apps/chat/Chat.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/home/lucas/Desktop/test/src/views/apps/chat/Chat.vue","mtime":1611055082000},{"path":"/home/lucas/Desktop/test/node_modules/css-loader/dist/cjs.js","mtime":1646760975182},{"path":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1646760975954},{"path":"/home/lucas/Desktop/test/node_modules/postcss-loader/src/index.js","mtime":1646760975438},{"path":"/home/lucas/Desktop/test/node_modules/sass-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":1646760974730},{"path":"/home/lucas/Desktop/test/node_modules/vue-loader/lib/index.js","mtime":1646760975666}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIn5AY29yZS9zY3NzL2Jhc2UvcGFnZXMvYXBwLWNoYXQuc2NzcyI7CkBpbXBvcnQgIn5AY29yZS9zY3NzL2Jhc2UvcGFnZXMvYXBwLWNoYXQtbGlzdC5zY3NzIjsK"},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuYA;AACA","file":"Chat.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<template>\n  <!-- Need to add height inherit because Vue 2 don't support multiple root ele -->\n  <div style=\"height: inherit\">\n    <div\n      class=\"body-content-overlay\"\n      :class=\"{'show': shallShowUserProfileSidebar || shallShowActiveChatContactSidebar || mqShallShowLeftSidebar}\"\n      @click=\"mqShallShowLeftSidebar=shallShowActiveChatContactSidebar=shallShowUserProfileSidebar=false\"\n    />\n\n    <!-- Main Area -->\n    <section class=\"chat-app-window\">\n\n      <!-- Start Chat Logo -->\n      <div\n        v-if=\"!activeChat.contact\"\n        class=\"start-chat-area\"\n      >\n        <div class=\"mb-1 start-chat-icon\">\n          <feather-icon\n            icon=\"MessageSquareIcon\"\n            size=\"56\"\n          />\n        </div>\n        <h4\n          class=\"sidebar-toggle start-chat-text\"\n          @click=\"startConversation\"\n        >\n          Start Conversation\n        </h4>\n      </div>\n\n      <!-- Chat Content -->\n      <div\n        v-else\n        class=\"active-chat\"\n      >\n        <!-- Chat Navbar -->\n        <div class=\"chat-navbar\">\n          <header class=\"chat-header\">\n\n            <!-- Avatar & Name -->\n            <div class=\"d-flex align-items-center\">\n\n              <!-- Toggle Icon -->\n              <div class=\"sidebar-toggle d-block d-lg-none mr-1\">\n                <feather-icon\n                  icon=\"MenuIcon\"\n                  class=\"cursor-pointer\"\n                  size=\"21\"\n                  @click=\"mqShallShowLeftSidebar = true\"\n                />\n              </div>\n\n              <b-avatar\n                size=\"36\"\n                :src=\"activeChat.contact.avatar\"\n                class=\"mr-1 cursor-pointer badge-minimal\"\n                badge\n                :badge-variant=\"resolveAvatarBadgeVariant(activeChat.contact.status)\"\n                @click.native=\"shallShowActiveChatContactSidebar=true\"\n              />\n              <h6 class=\"mb-0\">\n                {{ activeChat.contact.fullName }}\n              </h6>\n            </div>\n\n            <!-- Contact Actions -->\n            <div class=\"d-flex align-items-center\">\n              <feather-icon\n                icon=\"PhoneCallIcon\"\n                size=\"17\"\n                class=\"cursor-pointer d-sm-block d-none mr-1\"\n              />\n              <feather-icon\n                icon=\"VideoIcon\"\n                size=\"17\"\n                class=\"cursor-pointer d-sm-block d-none mr-1\"\n              />\n              <feather-icon\n                icon=\"SearchIcon\"\n                size=\"17\"\n                class=\"cursor-pointer d-sm-block d-none mr-50\"\n              />\n              <div class=\"dropdown\">\n                <b-dropdown\n                  variant=\"link\"\n                  no-caret\n                  toggle-class=\"p-0\"\n                  right\n                >\n                  <template #button-content>\n                    <feather-icon\n                      icon=\"MoreVerticalIcon\"\n                      size=\"17\"\n                      class=\"align-middle text-body\"\n                    />\n                  </template>\n                  <b-dropdown-item>\n                    View Contact\n                  </b-dropdown-item>\n                  <b-dropdown-item>\n                    Mute Notifications\n                  </b-dropdown-item>\n                  <b-dropdown-item>\n                    Block Contact\n                  </b-dropdown-item>\n                  <b-dropdown-item>\n                    Clear Chat\n                  </b-dropdown-item>\n                  <b-dropdown-item>\n                    Report\n                  </b-dropdown-item>\n                </b-dropdown>\n              </div>\n            </div>\n          </header>\n        </div>\n\n        <!-- User Chat Area -->\n        <vue-perfect-scrollbar\n          ref=\"refChatLogPS\"\n          :settings=\"perfectScrollbarSettings\"\n          class=\"user-chats scroll-area\"\n        >\n          <chat-log\n            :chat-data=\"activeChat\"\n            :profile-user-avatar=\"profileUserDataMinimal.avatar\"\n          />\n        </vue-perfect-scrollbar>\n\n        <!-- Message Input -->\n        <b-form\n          class=\"chat-app-form\"\n          @submit.prevent=\"sendMessage\"\n        >\n          <b-input-group class=\"input-group-merge form-send-message mr-1\">\n            <b-form-input\n              v-model=\"chatInputMessage\"\n              placeholder=\"Enter your message\"\n            />\n          </b-input-group>\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n          >\n            Send\n          </b-button>\n        </b-form>\n      </div>\n    </section>\n\n    <!-- Active Chat Contact Details Sidebar -->\n    <chat-active-chat-content-details-sidedbar\n      :shall-show-active-chat-contact-sidebar.sync=\"shallShowActiveChatContactSidebar\"\n      :contact=\"activeChat.contact || {}\"\n    />\n\n    <!-- Sidebar -->\n    <portal to=\"content-renderer-sidebar-left\">\n      <chat-left-sidebar\n        :chats-contacts=\"chatsContacts\"\n        :contacts=\"contacts\"\n        :active-chat-contact-id=\"activeChat.contact ? activeChat.contact.id : null\"\n        :shall-show-user-profile-sidebar.sync=\"shallShowUserProfileSidebar\"\n        :profile-user-data=\"profileUserData\"\n        :profile-user-minimal-data=\"profileUserDataMinimal\"\n        :mq-shall-show-left-sidebar.sync=\"mqShallShowLeftSidebar\"\n        @show-user-profile=\"showUserProfileSidebar\"\n        @open-chat=\"openChatOfContact\"\n      />\n    </portal>\n  </div>\n</template>\n\n<script>\nimport store from '@/store'\nimport {\n  ref, onUnmounted, nextTick,\n} from '@vue/composition-api'\nimport {\n  BAvatar, BDropdown, BDropdownItem, BForm, BInputGroup, BFormInput, BButton,\n} from 'bootstrap-vue'\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\n// import { formatDate } from '@core/utils/filter'\nimport { $themeBreakpoints } from '@themeConfig'\nimport { useResponsiveAppLeftSidebarVisibility } from '@core/comp-functions/ui/app'\nimport ChatLeftSidebar from './ChatLeftSidebar.vue'\nimport chatStoreModule from './chatStoreModule'\nimport ChatActiveChatContentDetailsSidedbar from './ChatActiveChatContentDetailsSidedbar.vue'\nimport ChatLog from './ChatLog.vue'\nimport useChat from './useChat'\n\nexport default {\n  components: {\n\n    // BSV\n    BAvatar,\n    BDropdown,\n    BDropdownItem,\n    BForm,\n    BInputGroup,\n    BFormInput,\n    BButton,\n\n    // 3rd Party\n    VuePerfectScrollbar,\n\n    // SFC\n    ChatLeftSidebar,\n    ChatActiveChatContentDetailsSidedbar,\n    ChatLog,\n  },\n  setup() {\n    const CHAT_APP_STORE_MODULE_NAME = 'app-chat'\n\n    // Register module\n    if (!store.hasModule(CHAT_APP_STORE_MODULE_NAME)) store.registerModule(CHAT_APP_STORE_MODULE_NAME, chatStoreModule)\n\n    // UnRegister on leave\n    onUnmounted(() => {\n      if (store.hasModule(CHAT_APP_STORE_MODULE_NAME)) store.unregisterModule(CHAT_APP_STORE_MODULE_NAME)\n    })\n\n    const { resolveAvatarBadgeVariant } = useChat()\n\n    // Scroll to Bottom ChatLog\n    const refChatLogPS = ref(null)\n    const scrollToBottomInChatLog = () => {\n      const scrollEl = refChatLogPS.value.$el || refChatLogPS.value\n      scrollEl.scrollTop = scrollEl.scrollHeight\n    }\n\n    // ------------------------------------------------\n    // Chats & Contacts\n    // ------------------------------------------------\n    const chatsContacts = ref([])\n    const contacts = ref([])\n\n    const fetchChatAndContacts = () => {\n      store.dispatch('app-chat/fetchChatsAndContacts')\n        .then(response => {\n          chatsContacts.value = response.data.chatsContacts\n          contacts.value = response.data.contacts\n          // eslint-disable-next-line no-use-before-define\n          profileUserDataMinimal.value = response.data.profileUser\n        })\n    }\n\n    fetchChatAndContacts()\n\n    // ------------------------------------------------\n    // Single Chat\n    // ------------------------------------------------\n    const activeChat = ref({})\n    const chatInputMessage = ref('')\n    const openChatOfContact = userId => {\n      // Reset send message input value\n      chatInputMessage.value = ''\n\n      store.dispatch('app-chat/getChat', { userId })\n        .then(response => {\n          activeChat.value = response.data\n\n          // Set unseenMsgs to 0\n          const contact = chatsContacts.value.find(c => c.id === userId)\n          if (contact) contact.chat.unseenMsgs = 0\n\n          // Scroll to bottom\n          nextTick(() => { scrollToBottomInChatLog() })\n        })\n\n      // if SM device =>  Close Chat & Contacts left sidebar\n      // eslint-disable-next-line no-use-before-define\n      mqShallShowLeftSidebar.value = false\n    }\n    const sendMessage = () => {\n      if (!chatInputMessage.value) return\n      const payload = {\n        contactId: activeChat.value.contact.id,\n        // eslint-disable-next-line no-use-before-define\n        senderId: profileUserDataMinimal.value.id,\n        message: chatInputMessage.value,\n      }\n      store.dispatch('app-chat/sendMessage', payload)\n        .then(response => {\n          const { newMessageData, chat } = response.data\n\n          // ? If it's not undefined => New chat is created (Contact is not in list of chats)\n          if (chat !== undefined) {\n            activeChat.value = { chat, contact: activeChat.value.contact }\n            chatsContacts.value.push({\n              ...activeChat.value.contact,\n              chat: {\n                id: chat.id,\n                lastMessage: newMessageData,\n                unseenMsgs: 0,\n              },\n            })\n          } else {\n            // Add message to log\n            activeChat.value.chat.chat.push(newMessageData)\n          }\n\n          // Reset send message input value\n          chatInputMessage.value = ''\n\n          // Set Last Message for active contact\n          const contact = chatsContacts.value.find(c => c.id === activeChat.value.contact.id)\n          contact.chat.lastMessage = newMessageData\n\n          // Scroll to bottom\n          nextTick(() => { scrollToBottomInChatLog() })\n        })\n    }\n\n    const perfectScrollbarSettings = {\n      maxScrollbarLength: 150,\n    }\n\n    // User Profile Sidebar\n    // ? Will contain all details of profile user (e.g. settings, about etc.)\n    const profileUserData = ref({})\n    // ? Will contain id, name and avatar & status\n    const profileUserDataMinimal = ref({})\n\n    const shallShowUserProfileSidebar = ref(false)\n    const showUserProfileSidebar = () => {\n      store.dispatch('app-chat/getProfileUser')\n        .then(response => {\n          profileUserData.value = response.data\n          shallShowUserProfileSidebar.value = true\n        })\n    }\n\n    // Active Chat Contact Details\n    const shallShowActiveChatContactSidebar = ref(false)\n\n    // UI + SM Devices\n    // Left Sidebar Responsiveness\n    const { mqShallShowLeftSidebar } = useResponsiveAppLeftSidebarVisibility()\n    const startConversation = () => {\n      if (store.state.app.windowWidth < $themeBreakpoints.lg) {\n        mqShallShowLeftSidebar.value = true\n      }\n    }\n\n    return {\n      // Filters\n      // formatDate,\n\n      // useChat\n      resolveAvatarBadgeVariant,\n\n      // Chat & Contacts\n      chatsContacts,\n      contacts,\n\n      // Single Chat\n      refChatLogPS,\n      activeChat,\n      chatInputMessage,\n      openChatOfContact,\n      sendMessage,\n\n      // Profile User Minimal Data\n      profileUserDataMinimal,\n\n      // User Profile Sidebar\n      profileUserData,\n      shallShowUserProfileSidebar,\n      showUserProfileSidebar,\n\n      // Active Chat Contact Details\n      shallShowActiveChatContactSidebar,\n\n      // UI\n      perfectScrollbarSettings,\n\n      // UI + SM Devices\n      startConversation,\n      mqShallShowLeftSidebar,\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n<style lang=\"scss\">\n@import \"~@core/scss/base/pages/app-chat.scss\";\n@import \"~@core/scss/base/pages/app-chat-list.scss\";\n</style>\n"]}]}